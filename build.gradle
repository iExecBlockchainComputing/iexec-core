plugins {
    id 'java'
    id 'eclipse'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
    id "org.springframework.boot" version "2.6.2"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

group = 'com.iexec.core'
sourceCompatibility = 11
targetCompatibility = 11

ext {
    springCloudVersion = '2021.0.0'
    mongockVersion = '4.2.7.BETA'
    gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && ! (gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://nexus.intra.iex.ec/repository/maven-public/"
    }

    maven { url "https://jitpack.io" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
    implementation "com.iexec.blockchain:iexec-blockchain-adapter-api-library:$iexecBlockchainAdapterVersion"
    implementation "com.iexec.result-proxy:iexec-result-proxy-library:$iexecResultVersion"
    implementation "com.iexec.sms:iexec-sms-library:$iexecSmsVersion"

    // spring
    implementation ("org.springframework.boot:spring-boot-starter") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging' //required for Graylog
    }
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.boot:spring-boot-starter-hateoas"

    // NoSuchMethodError: 'okhttp3.RequestBody okhttp3.RequestBody.create(java.lang.String, okhttp3.MediaType)'
    implementation 'com.squareup.okhttp3:okhttp:4.3.1' // Web3j issue: https://github.com/web3j/web3j/issues/1180
    // NoSuchMethodError: 'byte[] kotlin.collections.ArraysKt.copyInto(byte[], byte[], int, int, int)'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50' // https://stackoverflow.com/a/57907899

    testImplementation "org.springframework.boot:spring-boot-starter-test"

    // Spring Doc
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.3'

    // jason web token
    implementation "io.jsonwebtoken:jjwt:0.7.0"

    // expiring map
    implementation "net.jodah:expiringmap:0.5.10"

    // ipfs
    implementation "com.github.ipfs:java-ipfs-http-client:1.2.3"

    // graylog
    implementation 'biz.paluch.logging:logstash-gelf:1.5.1'

    implementation 'io.micrometer:micrometer-registry-prometheus:1.8.1'

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"
    testCompileOnly "org.projectlombok:lombok:1.18.2"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.2"

    // mongock
    implementation "com.github.cloudyrock.mongock:mongock-spring-v5:${mongockVersion}"
    implementation "com.github.cloudyrock.mongock:mongodb-springdata-v2-driver:${mongockVersion}"

    // awaitility
    testImplementation 'org.awaitility:awaitility:4.0.1'

    // mongo
    testImplementation 'org.testcontainers:testcontainers:1.16.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.2'
    testImplementation 'org.testcontainers:mongodb:1.16.2'

    // slf4j-test
    testImplementation 'uk.org.lidalia:slf4j-test:1.2.0'
}

jar {
    enabled = true
    archiveClassifier.set('library')
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()

    // To avoid warnings on multiple SLF4J bindings,
    // let's remove the Logback implementation
    // and keep only SLF4j Test.
    classpath = classpath.filter {!it.name.contains('logback-classic')}
}

task itest {
    group 'Verification'
    description 'Runs the integration tests.'
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username project.hasProperty('nexusUser') ? nexusUser : ''
                password project.hasProperty('nexusPassword') ? nexusPassword : ''
            }
            url project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}

ext.jarPathForOCI  = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName   = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

task buildImage(type: Exec) {
    group 'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn bootJar
    commandLine("sh", "-c", "docker build --build-arg jar=$jarPathForOCI -t $ociImageName:$gitShortCommit . &&" +
            "docker tag $ociImageName:$gitShortCommit $ociImageName:dev")
}
