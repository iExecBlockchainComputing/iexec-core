buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'jacoco'

group = 'com.iexec.core'
sourceCompatibility = 1.8

def UNIQUE_ID = 'hostname -f'.execute().text.trim()
def token = 'curl -XPOST --data name=${UNIQUE_ID} https://58448eb9dc6e105c7a3f77c74880f451234251ea3eeae544:@packagecloud.io/install/repositories/iexec/common/tokens.text'.execute().text.trim()

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://packagecloud.io/priv/${token}/iexec/common/maven2"
    }
}

configurations {
    springBootJar
    libraryJar
}

def LIBRARY_JAR_NAME = project.name + "-library"
jar {
    enabled = true
    baseName = LIBRARY_JAR_NAME
}

// the project will create two artifacts: one spring boot executable and one library
artifacts {
    springBootJar file: file('build/libs/' + project.name + '-' + version + '.jar')
    libraryJar file: file('build/libs/' + LIBRARY_JAR_NAME + '-' + version + '.jar')
}

dependencies {
    // iexec
    compile "com.iexec.common:iexec-common:$iexecCommonVersion"
    //compile files("../iexec-common/build/libs/iexec-common-${iexecCommonVersion}.jar")

    // spring
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.retry:spring-retry"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-security"

    testCompile "org.springframework.boot:spring-boot-starter-test"

    // swagger
    compile "io.springfox:springfox-swagger2:2.9.2"
    compile "io.springfox:springfox-swagger-ui:2.9.2"

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"

    // package cloud
    springBootJar "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
    libraryJar "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"

    // jason web token
    compile "io.jsonwebtoken:jjwt:0.7.0"

    // apache commons
    compile "org.apache.commons:commons-lang3:3.8.1"
    compile "commons-io:commons-io:2.6"

    // expiring map
    compile "net.jodah:expiringmap:0.5.8"
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/TestCoverageReport")
}
// the test coverage report will be created just before the build
build.dependsOn jacocoTestReport

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "remotes/origin/master"
def canUploadArchives = isMasterBranch
def gitShortCommit = 'git rev-parse --short HEAD'.execute().text.trim()
def isSnapshotVersion = project.version.contains("SNAPSHOT")

uploadSpringBootJar {
    description 'Upload the executable jar version of the core'
    repositories.mavenDeployer {
        pom.groupId = project.group
        pom.artifactId = project.name
        pom.version = version
        configuration = configurations.springBootJar
        repository(url: "packagecloud+https://packagecloud.io/iexec/core") {
            authentication(password: packageCloudPassword)
        }
    }
}

uploadLibraryJar {
    description 'Upload the library jar version of the core'
    repositories.mavenDeployer {
        pom.groupId = project.group
        pom.artifactId = LIBRARY_JAR_NAME
        pom.version = version
        configuration = configurations.libraryJar
        repository(url: "packagecloud+https://packagecloud.io/iexec/core") {
            authentication(password: packageCloudPassword)
        }
    }
}

uploadLibraryJar.enabled = canUploadArchives
uploadSpringBootJar.enabled = canUploadArchives
uploadArchives.enabled = canUploadArchives

uploadArchives.dependsOn uploadLibraryJar
uploadArchives.dependsOn uploadSpringBootJar


import org.apache.tools.ant.filters.ReplaceTokens

// create the version controller for the core
task createVersion(type: Copy) {
    // delete old one
    delete 'src/main/java/com/iexec/core/utils/Version.java'
    // use and copy template to the new location
    from 'src/main/resources/Version.java.template'
    into 'src/main/java/com/iexec/core/utils/'

    rename { String fileName ->
        fileName.replace('.template', '')
    }
    // replace tokens in the template file
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}
// the createVersion task should be called before compileJava or the version service will not work
compileJava.dependsOn createVersion

def imageName = "iexechub/iexec-core"

project.ext.getDockerImageNameFull = {
    def imageNameWithVersion = imageName + ":${version}"
    if (isSnapshotVersion) {
        return imageNameWithVersion + "-" + gitShortCommit
    } else {
        return imageNameWithVersion
    }
}

project.ext.getDockerImageNameShortCommit = {
    return imageName + ":" + gitShortCommit
}

task prepareDockerFile(type: Copy) {
    delete 'build/main/resources/'
    from 'src/main/resources/Dockerfile'
    into 'build/main/resources/'
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}


task buildImage(type: Exec) {
    description 'Build a docker image for the core'
    commandLine("sh", "-c", "docker image build -f build/main/resources/Dockerfile -t " + getDockerImageNameFull() + " .")
}

buildImage.dependsOn prepareDockerFile
buildImage.enabled = isMasterBranch || project.hasProperty("forceDockerBuild")

task pushImage(type: Exec) {
    if (project.hasProperty("dockerHubUser") && project.hasProperty("dockerHubPassword")) {
        commandLine("sh", "-c", "docker login -u " + project.dockerHubUser + " -p " + project.dockerHubPassword + " && " +
                "docker push " + getDockerImageNameFull() + " && " +
                "docker tag " + getDockerImageNameFull() + " " + getDockerImageNameShortCommit() + " && " +
                "docker push " + getDockerImageNameShortCommit() + " && " +
                "docker logout")
    } else {
        println "Credentials for DockerHub are missing, the images cannot be pushed"
    }
}

pushImage.dependsOn buildImage
pushImage.enabled = isMasterBranch && project.hasProperty("dockerHubUser") && project.hasProperty("dockerHubPassword")
