buildscript {
    ext {
        springBootVersion = '3.0.13'
    }
}

plugins {
    id 'java'
    id 'io.freefair.lombok' version '8.10.2'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'maven-publish'
}

ext {
    springCloudVersion = '2022.0.5'
    jjwtVersion = '0.11.5'
    mongockVersion = '5.4.0'
    testContainersVersion = '1.20.4'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

allprojects {
    group = 'com.iexec.core'
    if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
        version += '-NEXT-SNAPSHOT'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://docker-regis-adm.iex.ec/repository/maven-public/"
            credentials {
                username nexusUser
                password nexusPassword
            }
        }
        maven { url "https://jitpack.io" }
    }
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    // iexec
    implementation "com.iexec.commons:iexec-commons-poco:$iexecCommonsPocoVersion"
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
    implementation "com.iexec.blockchain:iexec-blockchain-adapter-api-library:$iexecBlockchainAdapterVersion"
    implementation "com.iexec.result-proxy:iexec-result-proxy-library:$iexecResultVersion"
    implementation "com.iexec.sms:iexec-sms-library:$iexecSmsVersion"
    implementation project(':iexec-core-library')
    implementation project(':iexec-task-api')

    // spring
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-hateoas"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation "org.springframework.retry:spring-retry"

    // Spring Doc
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // apache commons.lang3
    implementation 'org.apache.commons:commons-lang3'

    // json web token
    implementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"

    // expiring map
    implementation "net.jodah:expiringmap:0.5.10"

    // ipfs
    implementation "com.github.ipfs:java-ipfs-http-client:1.2.3"

    // observability
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // mongock
    implementation "io.mongock:mongock-springboot-v3:${mongockVersion}"
    implementation "io.mongock:mongodb-springdata-v4-driver:${mongockVersion}"

    // vavr
    implementation 'io.vavr:vavr:0.10.4'
}

springBoot {
    buildInfo()
}

tasks.named("bootJar") {
    manifest {
        attributes("Implementation-Title": "iExec Core Scheduler",
                "Implementation-Version": project.version)
    }
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                // awaitility
                implementation 'org.awaitility:awaitility'

                implementation 'org.springframework.boot:spring-boot-starter-test'

                // mongo
                implementation "org.testcontainers:junit-jupiter:$testContainersVersion"
                implementation "org.testcontainers:mongodb:$testContainersVersion"
            }
        }
    }
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
    systemProperty "mongo.image", "mongo:7.0.15-jammy"
}

tasks.register('itest') {
    group 'Verification'
    description 'Runs the integration tests.'
}

// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            artifact tasks.named("bootJar")
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}

ext.jarPathForOCI = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

tasks.register('buildImage', Exec) {
    group 'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn bootJar
    commandLine 'docker', 'build', '--build-arg', 'jar=' + jarPathForOCI, '-t', ociImageName + ':dev', '.'
}
